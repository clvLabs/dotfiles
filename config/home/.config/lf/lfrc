# Basic settings
set preview
set previewer ~/.config/lf/preview
set drawbox
# set hidden
set number
set icons
set globsearch
set incsearch
set ignorecase
set info size

# interpreter for shell commands
set shell zsh


# The following commands/keybindings are provided by default:
# cmd open &$OPENER "$f"
# map e $$EDITOR "$f"
# map i $$PAGER "$f"
# map w $$SHELL
# map zh set hidden!
# map zr set reverse!
# map zn set info
# map zs set info size
# map zt set info time
# map za set info size:time
# map sn :set sortby natural; set info
# map ss :set sortby size; set info size
# map st :set sortby time; set info time
# map sa :set sortby atime; set info atime
# map sc :set sortby ctime; set info ctime
# map se :set sortby ext; set info
# map gh cd ~
# map <space> :toggle; down



# set '-eu' options for shell commands
# These options are used to have safer shell commands. Option '-e' is used to
# exit on error and option '-u' is used to give error for unset variables.
# Option '-f' disables pathname expansion which can be useful when $f, $fs, and
# $fx variables contain names with '*' or '?' characters. However, this option
# is used selectively within individual commands as it can be limiting at
# times.
set shellopts '-eu'

# set internal field separator (IFS) to "\n" for shell commands
# This is useful to automatically split file names in $fs and $fx properly
# since default file separator used in these variables (i.e. 'filesep' option)
# is newline. You need to consider the values of these options and create your
# commands accordingly.
set ifs "\n"

# leave some space at the top and the bottom of the screen
set scrolloff 10

# use enter for shell commands
map <enter> shell

# execute current file (must be executable)
map x $$f
map X !$f

# dedicated keys for file opener actions
# map o &xdg-open $f
# map O $mimeopen --ask $f

# ----------------------------------------------------------------------
# ----------------------------------------------------------------------
# ---
# --- Custom mappings
# ---

# Unbind default mappings
map c
map cc clear
map e
map r

map i
map i $echo "$fx" | tr "\n" " " | xargs batcat --style=full --paging=always

map <backspace2> : up; toggle

# [.] toggle hidden
map . set hidden!

# [r]everse
map r set reverse!

# [D]elete file
map DD delete

# [b]ash commands
map b &ns # Open terminal in new window

# [g]o commands
map gb cd ~/Documents/btu-k/btu-kam # Go to btu-k folder
map gc cd ~/.config # Go to config folder
map gd cd ~/Downloads # Go to downloads folder
map gh cd ~ # Go to home folder
map gl cd ~/Documents/cnc/laser/projects # Go to laser folder
map gp cd ~/src/python # Go to python folder
map gt cd ~/src/dorna/tvgfx # Go to tvgfx folder
map gy cd ~/Documents/yalo/proyectos/clientes # Go to yalo folder

# [c]opy commands
cmd _copy_current_path ${{
   echo -n $PWD | xclip -selection c
}}

cmd _copy_selected_items_path ${{
   echo -n $fx | xclip -selection c
}}

cmd _copy_all_files_name ${{
   /bin/ls -1F | xclip -selection c
}}

cmd _copy_ALL_files_name ${{
   /bin/ls -A1F | xclip -selection c
}}

cmd _copy_all_files_path ${{
   /bin/ls -d1F $PWD/* | xclip -selection c
}}

cmd _copy_ALL_files_path ${{
   /bin/ls -dA1F $PWD/.* $PWD/* | xclip -selection c
}}

map cp _copy_current_path
map cs _copy_selected_items_path
map can _copy_all_files_name
map cAn _copy_ALL_files_name
map cap _copy_all_files_path
map cAp _copy_ALL_files_path

# [o]pen commands

cmd _open_with_sxiv &{{
  [[ -f "$f" ]] && sxiv -pqrs f "$f"
  [[ -d "$f" ]] && sxiv -tpqrs f "$f"
}}

map oa &mimeopen --ask "$f" # Open with (ask)
map ob &brave-browser "$f" # Open with Brave
map oc &code "$f" # Open with VSCode
map od &xdg-open $f # Open with default program
map oe $$EDITOR "$f" # Open with default editor
map oi _open_with_sxiv # Open with sxiv
map oI &sxiv -tpqrs f "$PWD" # Open current folder with sxiv
map ol $echo "$fx" | tr "\n" " " | xargs batcat --style=full --paging=always  # Open with less
map om &mpv "$f"  # Open with mpv
map oMr &mpv --video-rotate=90 "$f"  # Open with mpv (right)
map oMd &mpv --video-rotate=180 "$f"  # Open with mpv (down)
map oMl &mpv --video-rotate=270 "$f"  # Open with mpv (left)
map oMh &mpv --vf=lavfi="hflip" "$f"  # Open with mpv (hflip)
map oMv &mpv --vf=lavfi="vflip" "$f"  # Open with mpv (vflip)
map on $nano "$f" # Open with nano
map ot &nautilus "$f" # Open with nautilus
map ov $vim "$f" # Open with vim
map o4 &find "$f" -type f -name "*mp4" -exec mpv {} \+ # Open all mp4 files in selected folder

# Calc all dir sizes
cmd _calc_all_dir_sizes : {{
    glob-select *
    calcdirsize
    glob-unselect *
}}

map zc _calc_all_dir_sizes

# ----------------------------------------------------------------------
# ----------------------------------------------------------------------

# define a custom 'open' command
# This command is called when current file is not a directory. You may want to
# use either file extensions and/or mime types here. Below uses an editor for
# text files and a file opener for the rest.
cmd open ${{
    test -L $f && f=$(readlink -f $f)
    case $(file --mime-type $f -b) in
        text/*) $PAGER $fx;;
        *) for f in $fx; do setsid $OPENER $f > /dev/null 2> /dev/null & done;;
    esac
}}

# define a custom 'rename' command without prompt for overwrite
# cmd rename %[ -e $1 ] && printf "file exists" || mv $f $1
# map r push :rename<space>

# make sure trash folder exists
# %mkdir -p ~/.trash

# move current file or selected files to trash folder
# (also see 'man mv' for backup/overwrite options)
cmd trash %set -f; mv $fx ~/.trash

# define a custom 'delete' command
# cmd delete ${{
#     set -f
#     printf "$fx\n"
#     printf "delete?[y/n]"
#     read ans
#     [ $ans = "y" ] && rm -rf $fx
# }}

# use '<delete>' key for either 'trash' or 'delete' command
# map <delete> trash
# map <delete> delete

# extract the current file with the right command
# (xkcd link: https://xkcd.com/1168/)
cmd extract ${{
    set -f
    case $f in
        *.tar.bz|*.tar.bz2|*.tbz|*.tbz2) tar xjvf $f;;
        *.tar.gz|*.tgz) tar xzvf $f;;
        *.tar.xz|*.txz) tar xJvf $f;;
        *.zip) unzip $f;;
        *.rar) unrar x $f;;
        *.7z) 7z x $f;;
    esac
}}

# compress current file or selected files with tar and gunzip
cmd tar ${{
    set -f
    mkdir $1
    cp -r $fx $1
    tar czf $1.tar.gz $1
    rm -rf $1
}}

# compress current file or selected files with zip
cmd zip ${{
    set -f
    mkdir $1
    cp -r $fx $1
    zip -r $1.zip $1
    rm -rf $1
}}


# ----------------------------------------------------------------------
# ----------------------------------------------------------------------

# cmd on-cd &{{
#     # display git repository status in your prompt
#     # source /usr/share/git/completion/git-prompt.sh
#     # GIT_PS1_SHOWDIRTYSTATE=auto
#     # GIT_PS1_SHOWSTASHSTATE=auto
#     # GIT_PS1_SHOWUNTRACKEDFILES=auto
#     # GIT_PS1_SHOWUPSTREAM=auto
#     # git=$(__git_ps1 " (%s)") || true
#     xxx=$(spaceship_git)
#     fmt="\033[32;1m%u@%h\033[0m:\033[34;1m%d\033[0m\033[1m%f ($xxx) \033[0m"
#     lf -remote "send $id set promptfmt \"$fmt\""
# }}
# on-cd  # Execute on startup
